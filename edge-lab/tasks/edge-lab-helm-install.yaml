---
Description: "Run Helm Charts"
Name: "edge-lab-helm-install"
Documentation: |
  Installs Helm on the leader.
  This uses the Digital Rebar Cluster pattern so cluster/profile and cluster/leader must be set.
RequiredParams:
  - cluster/profile
  - cluster/leaders
  - edge-lab/helm-version
  - edge-lab/helm-download-url
ExtraClaims:
  - scope: "files"
    action: "post,get"
    specific: "*"
Templates:
  - Name: "helm-intsall.sh"
    Path: ""
    Contents: |
      #!/usr/bin/env bash

      {{ template "setup.tmpl" . }}

      {{ template "cluster-shared.tmpl" .}}
      {{ template "download-tools.tmpl" .}}

      if ! $CLUSTER_I_AM_LEADER ; then
        echo "Leaders only.  Stopping execution"
        exit 0
      fi

      echo "Run helm on the leader (skip for workers)..."
      drpcli machines meta set $RS_UUID key color to yellow

      {{ if .ParamExists "cluster/profile" -}}
      CLUSTER_PROFILE={{.Param "cluster/profile"}}
      PROFILE_TOKEN={{.GenerateProfileToken (.Param "cluster/profile") 7200}}
      {{else -}}
      xiterr 1 "Missing cluster/profile on the machine!"
      {{end -}}

      {{ if .ParamExists "helm/version" -}}
        {{ $helmversion := .Param "helm/version" -}}
      {{ else -}}
        {{ if .ParamExists "krib/helm-version" -}}
        {{ $helmversion := .Param "krib/helm-version" -}}
        {{ end -}}
        {{ if .ParamExists "edge-lab/helm-version" -}}
        {{ $helmversion := .Param "edge-lab/helm-version" -}}
        {{ end -}}
      {{ end -}}

      if which helm ; then
        echo "found $(which helm) binary version $(helm version), moving on..."
      else
        BINARIES="/usr/local/bin/helm"
        if drpcli files exists "helm/helm"; then
          echo "Found in DRP helm/helm - downloading from there"
          drpcli files download "helm/helm" to $BINARIES
        else
          {{ if eq $helmversion "latest" -}}
            echo "Looking up latest helm version"
            download -L --remote-name-all "https://api.github.com/repos/helm/helm/releases/latest" -o helm_latest.json
            HELM_VERSION=$(jq -r .tag_name <<< cat helm_latest.json)
          {{ else }}
            HELM_VERSION={{ $helmversion }}
          {{ end }}
          echo "Using Helm Version $HELM_VERSION"
          echo "Installing Helm for arch $arch from {{ .Param "edge-lab/helm-download-url" }}"
          HELM_DOWNLOAD="{{ .Param "edge-lab/helm-download-url" -}}/helm-$HELM_VERSION-linux-$arch.tar.gz"
          echo "Download helm from $HELM_DOWNLOAD"
          download -L --remote-name-all "$HELM_DOWNLOAD" -o helm.tar.gz
          echo "Download helm checksum from $HELM_DOWNLOAD.sha256"
          download -L --remote-name-all "$HELM_DOWNLOAD.sha256" -o helm.tar.gz.sha256

          if grep -Fxq "$(sha256sum helm.tar.gz)" helm.tar.gz.sha256 ; then
            echo "Checksum Test Pass"
          else
            echo "Checksum Does not match"
            sha256sum helm.tar.gz -c ${helm.tar.gz.sha256}
            exit 1
          fi
          tar -zxvf helm.tar.gz
          mv linux-$ARCH $BINARIES
          echo "save downloaded files to helm/helm for next pass"
          drpcli files upload "$BINARIES" as "helm/helm"
        fi
        chmod +x $BINARIES
        echo "helm downloaded to $BINARIES"
      fi

      drpcli machines meta set $RS_UUID key color to green
      echo "Done"
      exit 0

Meta:
  icon: "download"
  color: "yellow"
  title: "Community Content"
  copyright: "RackN 2020"
  feature-flags: "sane-exit-codes"
