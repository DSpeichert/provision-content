#!/usr/bin/env bash
# Kubernetes Rebar Integrated Boot (KRIB) Docker Install
set -e

echo "starting containerd v{{.Param "containerd/version"}} install"
# Get access and who we are.
{{template "setup.tmpl" .}}

drpcli machines meta set $RS_UUID key color to yellow
drpcli machines meta set $RS_UUID key icon to docker

{{ template "cluster-shared.tmpl" .}}
{{ template "download-tools.tmpl" .}}

# TODO - figure out arch
ARCH="amd64"
BINARIES="cri-containerd-{{.Param "containerd/version"}}.linux-${ARCH}.tar.gz"

if [[ ! -f $BINARIES ]] ; then
  if $CLUSTER_I_AM_LEADER; then
    if drpcli files exists "k3s/$BINARIES"; then
      echo "Found in DRP files/k3s - downloading from there"
      drpcli files download "k3s/$BINARIES" > "$BINARIES"
    else
      echo "Internet Download containerd v{{.Param "containerd/version"}} to $BINARIES"
      download -L --remote-name-all https://storage.googleapis.com/cri-containerd-release/$BINARIES -o $BINARIES
      CHECK=$(sha256sum $BINARIES)
      SHA256=$(curl -L https://storage.googleapis.com/cri-containerd-release/$BINARIES.sha256)
      if [[ "$CHECK" == "$SHA256  $BINARIES" ]] ; then
        echo "verified checksum for $BINARIES! now upload"
        drpcli files upload "$BINARIES" as "k3s/$BINARIES"
      else
        echo "checksum does not match! computed $CHECK vs download $SHA256"
        exit 1
      fi
    fi
  else    
    echo "Not the leader - waiting for k3s/node-token to be defined"
    drpcli machines meta set $RS_UUID key color to grey
    cluster_wait_for_variable "k3s/node-token"
    drpcli machines meta set $RS_UUID key color to yellow
    echo "Download binaries from DRP k3s/$BINARIES"
    drpcli files download "k3s/$BINARIES" > $BINARIES
  fi
  echo "untaring $BINARIES"
  tar --no-overwrite-dir -C / -xzf $BINARIES
else
  echo "$BINARIES already downloaded"
fi

## Override the default log level if not info
{{ $llevel := .Param "containerd/loglevel" }} {{ if ne $llevel "info" }}
echo "Creating /etc/systemd/system/containerd.service.d/override.conf file"
mkdir -p /etc/systemd/system/containerd.service.d
cat << EOF > /etc/systemd/system/containerd.service.d/override.conf
[Service]
ExecStart=/usr/local/bin/containerd -l {{ $llevel }}
EOF
systemctl daemon-reload
{{ end }}

# start containerd
systemctl restart containerd
systemctl enable containerd

ctr --version
drpcli machines meta set $RS_UUID key color to green
echo "Containerd v{{.Param "containerd/version"}} installed successfully"
exit 0
